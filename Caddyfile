{
	log {
		output stdout
		format console
		level info
	}
	on_demand_tls {
		ask http://127.0.0.1/ask
	}

	log access {
		include http.log.access.global_logger
		output stdout
		format console
		level info
	}
}

(proxy) {
	encode gzip

	header {
		-Server
		-Via
		-x-envoy-upstream-service-time
		-x-powered-by
	}

	header {
		#		Content-Security-Policy "default-src https: data: 'unsafe-inline'; ; worker-src blob: https: data: 'unsafe-inline';"
		Referrer-Policy "strict-origin-when-cross-origin"
		Strict-Transport-Security "max-age=63072000"
		X-Content-Type-Options "nosniff"
		X-Frame-Options "DENY"
		X-XSS-Protection "1; mode=block"
	}

	file_server {
		#precompressed br gzip # uncomment if you have precompressed br and gzip
	}
}

:443 {
	tls {
		on_demand
	}
	log global_logger
	route {
		root * /var/www/html/{host}

		#@example1 host test.example.com #uncomment if custom rules for host is needed, also add domains below
		#handle @example1 {
		#    root * /custom-root-path
		#}

		import proxy
	}
	handle_errors {
		# for SPA app, remove if not needed
		@404 {
			expression {http.error.status_code} == 404
		}
		redir @404 /index.html permanent
	}
}

http://127.0.0.1 {
	route {
		path_checker {
			path "/var/www/html/"
			# domains test.localhost test2.localhost (optional, only if custom handler is added)
		}
	}
	route /healthz {
		respond "OK" 200
	}
	respond 404
}
